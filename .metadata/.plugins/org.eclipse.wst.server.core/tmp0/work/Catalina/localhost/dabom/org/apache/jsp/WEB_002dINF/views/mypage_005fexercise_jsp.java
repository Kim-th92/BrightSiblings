/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.39
 * Generated at: 2021-01-04 20:40:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class mypage_005fexercise_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/Users/seowonchoi/Documents/finalproject/BrightSiblings/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/BrightSiblings/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1607496808000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fotherwise;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fotherwise = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fotherwise.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("<style type=\"text/css\">form {margin: 0 auto; width: 460px;}</style>\n");
      out.write("<style type=\"text/css\">\n");
      out.write("#course{\n");
      out.write("\tborder:none;\n");
      out.write("\tbackground-color:#ea97ad;\n");
      out.write("    padding: 10px 140px;\n");
      out.write("    border-radius: 5% 5%;\n");
      out.write("    }\n");
      out.write("#today{\n");
      out.write("\ttext-align:center;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("<link rel=\"stylesheet\" href=\"resources/css/exercise.css\" type=\"text/css\">\n");
      out.write("<body>\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp", out, false);
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "mypage_middle.jsp", out, false);
      out.write("\n");
      out.write("\t<script type=\"text/javascript\">\n");
      out.write("\t\n");
      out.write("\t\tfunction selectCheck(form) {\n");
      out.write("\t\t\tform.submit();\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\tfunction monthDown(form) {\n");
      out.write("\t\t\tif (form.month.value > 1) {\n");
      out.write("\t\t\t\tform.month.value--;\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tform.month.value = 12;\n");
      out.write("\t\t\t\tform.year.value--;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tform.submit();\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\tfunction monthUp(form) {\n");
      out.write("\t\t\tif (form.month.value < 12) {\n");
      out.write("\t\t\t\tform.month.value++;\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tform.month.value = 1;\n");
      out.write("\t\t\t\tform.year.value++;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tform.submit();\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t</script>\n");
      out.write("\t<script src=\"https://code.jquery.com/jquery-3.4.1.min.js\"></script>\n");
      out.write("\t<script src=\"https://html2canvas.hertzen.com/dist/html2canvas.min.js\"></script>\n");
      out.write("\t<script type=\"text/javascript\"\n");
      out.write("\t\tsrc=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=e524d46f1f18a6a0be2977706f8edcc1\"></script>\n");
      out.write("\t<script type=\"text/javascript\"\n");
      out.write("\t\tsrc=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=e524d46f1f18a6a0be2977706f8edcc1&libraries=services,clusterer,drawing\"></script>\n");
      out.write("\t<div id=\"map\" style=\"width: 800px; height: 400px; margin: auto;\"></div>\n");
      out.write("\n");
      out.write("\t<script>\n");
      out.write("\t\tvar container = document.getElementById('map');\n");
      out.write("\t\tvar options = {\n");
      out.write("\t\t\tcenter : new kakao.maps.LatLng(33.450701, 126.570667),\n");
      out.write("\t\t\tlevel : 4\n");
      out.write("\t\t};\n");
      out.write("\t\tvar map = new kakao.maps.Map(container, options);\n");
      out.write("\t</script>\n");
      out.write("\t\n");
      out.write("\t<script>\n");
      out.write("\t\n");
      out.write("\t\tif (navigator.geolocation) {\n");
      out.write("\t\t\tnavigator.geolocation.getCurrentPosition(function(position) {\n");
      out.write("\t\t\t\tvar lat = position.coords.latitude;\n");
      out.write("\t\t\t\tvar lon = position.coords.longitude;\n");
      out.write("\t\t\t\tmap.setCenter(new kakao.maps.LatLng(lat, lon));\n");
      out.write("\t\t\t\tvar locPosition = new kakao.maps.LatLng(lat, lon);\n");
      out.write("\t\t\t\tvar marker = new kakao.maps.Marker({\n");
      out.write("\t\t\t\t\tmap : map,\n");
      out.write("\t\t\t\t\tposition : locPosition\n");
      out.write("\t\t\t\t});\n");
      out.write("\t\t\t\tmarker.setMap(map);\n");
      out.write("\t\t\t});\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tvar locPosition = new kakao.maps.LatLng(37.24065819884836, 131.86713661059272);\n");
      out.write("\t\t\tvar message = '<div style=\"padding:15px; margin:15px;\">현재 위치에 대한 정보를 가져올 수 없는 브라우저입니다.</div>';\n");
      out.write("\t\t\tvar marker = new kakao.maps.Marker({\n");
      out.write("\t\t\t\tmap : map,\n");
      out.write("\t\t\t\tposition : locPosition\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\tvar infowindow = new kakao.maps.InfoWindow({\n");
      out.write("\t\t\t\tcontent : message\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\tinfowindow.open(map, marker);\n");
      out.write("\t\t\tmap.setCenter(locPosition);\n");
      out.write("\t\t}\n");
      out.write("\t</script>\n");
      out.write("\n");
      out.write("\t<script>\n");
      out.write("\t\tvar mapTypeControl = new kakao.maps.MapTypeControl();\n");
      out.write("\t\tmap.addControl(mapTypeControl, kakao.maps.ControlPosition.BOTTOM);\n");
      out.write("\t\tvar zoomControl = new kakao.maps.ZoomControl();\n");
      out.write("\t\tmap.addControl(zoomControl, kakao.maps.ControlPosition.BOTTOMRIGHT);\n");
      out.write("\t</script>\n");
      out.write("\n");
      out.write("\t<script>\n");
      out.write("\t\tvar drawingFlag = false;\n");
      out.write("\t\tvar moveLine;\n");
      out.write("\t\tvar clickLine;\n");
      out.write("\t\tvar distanceOverlay;\n");
      out.write("\t\tvar dots = {};\n");
      out.write("\t\tkakao.maps.event.addListener(map, 'click', function(mouseEvent) {\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tvar clickPosition = mouseEvent.latLng;\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tif (!drawingFlag) {\n");
      out.write("\t\t\t\tdrawingFlag = true;\n");
      out.write("\t\t\t\tdeleteClickLine();\n");
      out.write("\t\t\t\tdeleteDistnce();\n");
      out.write("\t\t\t\tdeleteCircleDot();\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tclickLine = new kakao.maps.Polyline({\n");
      out.write("\t\t\t\t\tmap : map,\n");
      out.write("\t\t\t\t\tpath : [ clickPosition ],\n");
      out.write("\t\t\t\t\tstrokeWeight : 3,\n");
      out.write("\t\t\t\t\tstrokeColor : 'pink',\n");
      out.write("\t\t\t\t\tstrokeOpacity : 1,\n");
      out.write("\t\t\t\t\tstrokeStyle : 'shortdash'\n");
      out.write("\t\t\t\t});\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tmoveLine = new kakao.maps.Polyline({\n");
      out.write("\t\t\t\t\tstrokeWeight : 2,\n");
      out.write("\t\t\t\t\tstrokeColor : 'pink',\n");
      out.write("\t\t\t\t\tstrokeOpacity : 0.5,\n");
      out.write("\t\t\t\t\tstrokeStyle : 'solid'\n");
      out.write("\t\t\t\t});\n");
      out.write("\n");
      out.write("\t\t\t\tdisplayCircleDot(clickPosition, 0);\n");
      out.write("\n");
      out.write("\t\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t\tvar path = clickLine.getPath();\n");
      out.write("\t\t\t\tpath.push(clickPosition);\n");
      out.write("\t\t\t\tclickLine.setPath(path);\n");
      out.write("\t\t\t\tvar distance = Math.round(clickLine.getLength());\n");
      out.write("\t\t\t\tdisplayCircleDot(clickPosition, distance);\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\n");
      out.write("\t\tkakao.maps.event.addListener(map, 'mousemove', function(mouseEvent) {\n");
      out.write("\t\t\tif (drawingFlag) {\n");
      out.write("\n");
      out.write("\t\t\t\tvar mousePosition = mouseEvent.latLng;\n");
      out.write("\t\t\t\tvar path = clickLine.getPath();\n");
      out.write("\t\t\t\tvar movepath = [ path[path.length - 1], mousePosition ];\n");
      out.write("\t\t\t\tmoveLine.setPath(movepath);\n");
      out.write("\t\t\t\tmoveLine.setMap(map);\n");
      out.write("\t\t\t\tvar distance = Math.round(clickLine.getLength() + moveLine.getLength());\n");
      out.write("\t\t\t\tvar content = '<div class=\"dotOverlay distanceInfo\">총 거리 <span class=\"number\">'\n");
      out.write("\t\t\t\t\t\t\t\t+ distance + '</span>m</div>';\n");
      out.write("\t\t\t\tshowDistance(content, mousePosition);\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\n");
      out.write("\t\tkakao.maps.event.addListener(map, 'rightclick', function(mouseEvent) {\n");
      out.write("\n");
      out.write("\t\t\tif (drawingFlag) {\n");
      out.write("\n");
      out.write("\t\t\t\tmoveLine.setMap(null);\n");
      out.write("\t\t\t\tmoveLine = null;\n");
      out.write("\t\t\t\tvar path = clickLine.getPath();\n");
      out.write("\n");
      out.write("\t\t\t\tif (path.length > 1) {\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\t\tif (dots[dots.length - 1].distance) {\n");
      out.write("\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\tdots[dots.length - 1].distance.setMap(null);\n");
      out.write("\t\t\t\t\t\tdots[dots.length - 1].distance = null;\n");
      out.write("\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\t\tvar distance = Math.round(clickLine.getLength());\n");
      out.write("\t\t\t\t\tvar content = getTimeHTML(distance);\n");
      out.write("\t\t\t\t\tshowDistance(content, path[path.length - 1]);\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\t\tdeleteClickLine();\n");
      out.write("\t\t\t\t\tdeleteCircleDot();\n");
      out.write("\t\t\t\t\tdeleteDistnce();\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tdrawingFlag = false;\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t});\n");
      out.write("\n");
      out.write("\t\tfunction deleteClickLine() {\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tif (clickLine) {\n");
      out.write("\t\t\t\tclickLine.setMap(null);\n");
      out.write("\t\t\t\tclickLine = null;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tfunction showDistance(content, position) {\n");
      out.write("\n");
      out.write("\t\t\tif (distanceOverlay) {\n");
      out.write("\n");
      out.write("\t\t\t\tdistanceOverlay.setPosition(position);\n");
      out.write("\t\t\t\tdistanceOverlay.setContent(content);\n");
      out.write("\n");
      out.write("\t\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t\tdistanceOverlay = new kakao.maps.CustomOverlay({\n");
      out.write("\t\t\t\t\tmap : map,\n");
      out.write("\t\t\t\t\tcontent : content,\n");
      out.write("\t\t\t\t\tposition : position,\n");
      out.write("\t\t\t\t\txAnchor : 0,\n");
      out.write("\t\t\t\t\tyAnchor : 0,\n");
      out.write("\t\t\t\t\tzIndex : 3\n");
      out.write("\t\t\t\t});\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tfunction deleteDistnce() {\n");
      out.write("\t\t\tif (distanceOverlay) {\n");
      out.write("\t\t\t\tdistanceOverlay.setMap(null);\n");
      out.write("\t\t\t\tdistanceOverlay = null;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tfunction displayCircleDot(position, distance) {\n");
      out.write("\n");
      out.write("\t\t\tvar circleOverlay = new kakao.maps.CustomOverlay({\n");
      out.write("\t\t\t\tcontent : '<div class=\"dot\"></div>',\n");
      out.write("\t\t\t\tposition : position,\n");
      out.write("\t\t\t\tzIndex : 1\n");
      out.write("\t\t\t});\n");
      out.write("\n");
      out.write("\t\t\tcircleOverlay.setMap(map);\n");
      out.write("\n");
      out.write("\t\t\tif (distance > 0) {\n");
      out.write("\t\t\t\tvar distanceOverlay = new kakao.maps.CustomOverlay(\n");
      out.write("\t\t\t\t\t\t{\n");
      out.write("\t\t\t\t\t\t\tposition : position,\n");
      out.write("\t\t\t\t\t\t\tyAnchor : 1,\n");
      out.write("\t\t\t\t\t\t\tzIndex : 2\n");
      out.write("\t\t\t\t\t\t});\n");
      out.write("\n");
      out.write("\t\t\t\tdistanceOverlay.setMap(map);\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tdots.push({\n");
      out.write("\t\t\t\tcircle : circleOverlay,\n");
      out.write("\t\t\t\tdistance : distanceOverlay\n");
      out.write("\t\t\t});\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tfunction deleteCircleDot() {\n");
      out.write("\t\t\tvar i;\n");
      out.write("\n");
      out.write("\t\t\tfor (i = 0; i < dots.length; i++) {\n");
      out.write("\t\t\t\tif (dots[i].circle) {\n");
      out.write("\t\t\t\t\tdots[i].circle.setMap(null);\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\tif (dots[i].distance) {\n");
      out.write("\t\t\t\t\tdots[i].distance.setMap(null);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tdots = [];\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tfunction getTimeHTML(distance) {\n");
      out.write("\n");
      out.write("\t\t\tvar walkkTime = distance / 67 | 0;\n");
      out.write("\t\t\tvar walkHour = '', walkMin = '';\n");
      out.write("\n");
      out.write("\t\t\tif (walkkTime > 60) {\n");
      out.write("\t\t\t\twalkHour = '<span class=\"number\">' + Math.floor(walkkTime / 60) + '</span>시간 '\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t\twalkMin = '<span class=\"number\">' + walkkTime % 60 + '</span>분'\n");
      out.write("\n");
      out.write("\t\t\tvar bycicleTime = distance / 227 | 0;\n");
      out.write("\t\t\tvar bycicleHour = '', bycicleMin = '';\n");
      out.write("\n");
      out.write("\t\t\tif (bycicleTime > 60) {\n");
      out.write("\t\t\t\tbycicleHour = '<span class=\"number\">'\n");
      out.write("\t\t\t\t\t\t+ Math.floor(bycicleTime / 60) + '</span>시간 '\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tbycicleMin = '<span class=\"number\">' + bycicleTime % 60\n");
      out.write("\t\t\t\t\t+ '</span>분'\n");
      out.write("\n");
      out.write("\t\t\tvar content =  '<ul class=\"dotOverlay distanceInfo\">';\n");
      out.write("\t\t\t\tcontent += '\t<li>';\n");
      out.write("\t\t\t\tcontent += '\t\t<span class=\"label\">총 거리</span><span class=\"number\">' + distance + '</span>m';\n");
      out.write("\t\t\t\tcontent += '\t</li>';\n");
      out.write("\t\t\t\tcontent += '\t<li>';\n");
      out.write("\t\t\t\tcontent += '\t\t<span class=\"label\">도보</span>' + walkHour + walkMin;\n");
      out.write("\t\t\t\tcontent += '\t</li>';\n");
      out.write("\t\t\t\tcontent += '\t<li>';\n");
      out.write("\t\t\t\tcontent += '\t\t<span class=\"label\">자전거</span>' + bycicleHour + bycicleMin;\n");
      out.write("\t\t\t\tcontent += '\t</li>';\n");
      out.write("\t\t\t\tcontent += '</ul>'\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tdocument.getElementById('distance').value = distance;\n");
      out.write("\t\t\tdocument.getElementById('burn_kcal').value = distance/20;\n");
      out.write("\t\t\t\n");
      out.write("\t\t\treturn content;\n");
      out.write("\t\t}\n");
      out.write("\t</script>\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\t<form action=\"distanceres.do\" method=\"post\">\n");
      out.write("\t\t코스 이름:\n");
      out.write("\t\t<input type=\"text\" name=\"course_name\"/>\n");
      out.write("\t\t<input type=\"submit\" id=\"course\" value=\"오늘의 코스로 등록\"/>\n");
      out.write("\t\t<input type=\"hidden\" id=\"distance\" name=\"distance\"/>\n");
      out.write("\t\t<input type=\"hidden\" name=\"member_no\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${login.member_no }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\n");
      out.write("\t\t<input type=\"hidden\" id=\"burn_kcal\" name=\"burn_kcal\" value=\"\"/>\n");
      out.write("\t</form>\n");
      out.write("\t\n");
      out.write("\t<h1>오늘의 기록</h1>\n");
      out.write("\n");
      out.write("\t<table id=\"today\" border=\"1\">\n");
      out.write("\t\t<colgroup>\n");
      out.write("\t\t\t<col width=\"400\" />\n");
      out.write("\t\t\t<col width=\"222\" />\n");
      out.write("\t\t\t<col width=\"222\" />\n");
      out.write("\t\t</colgroup>\n");
      out.write("\t\t<tr>\n");
      out.write("\t\t\t<th>코스</th>\n");
      out.write("\t\t\t<th>뛴 거리</th>\n");
      out.write("\t\t\t<th>소모 칼로리</th>\n");
      out.write("\t\t</tr>\n");
      out.write("\t\t");
      if (_jspx_meth_c_005fchoose_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("\t</table>\n");
      out.write("\t\n");
      out.write("\t");
      if (_jspx_meth_c_005fchoose_005f1(_jspx_page_context))
        return;
      out.write("\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\t\n");
      out.write("\t\n");


	//현재 날짜 정보
	Calendar cal = Calendar.getInstance();

	int year = cal.get(Calendar.YEAR);
	int month = cal.get(Calendar.MONTH);
	int date = cal.get(Calendar.DATE);
	
	//오늘 날짜
	String today = year + "." + (month + 1) + "." + date;
	
	//선택한 연도, 월
	String input_year = request.getParameter("year");
	String input_month = request.getParameter("month");
	
	if (input_month != null) {
		month = Integer.parseInt(input_month) - 1;
	}
	
	if (input_year != null) {
		year = Integer.parseInt(input_year);
	}
	
	// 1일부터 시작하는 달력을 만들기 위해 오늘의 연도,월을 셋팅하고 일부분은 1을 셋팅한다.
	cal.set(year, month, 1);
	
	// 셋팅한 날짜로 부터 아래 내용을 구함
	// 해당 월의 첫날를 구함
	int startDate = cal.getMinimum(Calendar.DATE);
	
	// 해당 월의 마지막 날을 구함
	int endDate = cal.getActualMaximum(Calendar.DATE);
	
	// 1일의 요일을 구함
	int startDay = cal.get(Calendar.DAY_OF_WEEK);
	
	int count = 0;
	

      out.write("\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\t\n");
      out.write("\t<form method=\"post\" action=\"mypage_main.do\" name=\"change\">\n");
      out.write("\t\t<table width=\"400\" cellpadding=\"2\" cellspacing=\"0\" border=\"0\" align=\"center\">\n");
      out.write("\t\t\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t<td width=\"140\" align=\"right\"><input type=\"button\" value=\"◁\" onClick=\"monthDown(this.form)\"></td>\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t<td width=\"120\" align=\"center\">\n");
      out.write("\t\t\t<select name=\"year\" onchange=\"selectCheck(this.form)\">\n");
      out.write("\t\t\t\t");

					for (int i = year - 10; i < year + 10; i++) {
					String selected = (i == year) ? "selected" : "";
					String color = (i == year) ? "#CCCCCC" : "#FFFFFF";
					out.print("<option value=" + i + " " + selected + " style=background:" + color + ">" + i + "</option>");
				}
				
      out.write("\n");
      out.write("\t\t\t</select>\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t<select name=\"month\" onchange=\"selectCheck(this.form)\">\n");
      out.write("\t\t\t\t\t");

						for (int i = 1; i <= 12; i++) {
						String selected = (i == month + 1) ? "selected" : "";
						String color = (i == month + 1) ? "#CCCCCC" : "#FFFFFF";
						out.print("<option value=" + i + " " + selected + " style=background:" + color + ">" + i + "</option>");
					}
					
      out.write("\n");
      out.write("\t\t\t</select>\n");
      out.write("\t\t\t</td>\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t<td width=\"140\"><input type=\"button\" value=\"▷\" onClick=\"monthUp(this.form)\"></td>\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<td align=\"right\" colspan=\"3\">\n");
      out.write("\t\t\t\t\t<a href=\"mypage_main.do\"><font size=\"2\">오늘 : ");
      out.print(today);
      out.write("</font></a>\n");
      out.write("\t\t\t\t</td>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t\t\n");
      out.write("\t\t</table>\n");
      out.write("\t</form>\n");
      out.write("\t<table width=\"400\" cellpadding=\"2\" cellspacing=\"0\" border=\"1\" align=\"center\">\n");
      out.write("\t\t<tr height=\"30\">\n");
      out.write("\t\t\t<td><font size=\"2\">일</font></td>\n");
      out.write("\t\t\t<td><font size=\"2\">월</font></td>\n");
      out.write("\t\t\t<td><font size=\"2\">화</font></td>\n");
      out.write("\t\t\t<td><font size=\"2\">수</font></td>\n");
      out.write("\t\t\t<td><font size=\"2\">목</font></td>\n");
      out.write("\t\t\t<td><font size=\"2\">금</font></td>\n");
      out.write("\t\t\t<td><font size=\"2\">토</font></td>\n");
      out.write("\t\t</tr>\n");
      out.write("\t\t<tr height=\"30\">\n");
      out.write("\t\t\t");

				for (int i = 1; i < startDay; i++) {
				count++;
			
      out.write("\n");
      out.write("\t\t\t<td>&nbsp;</td>\n");
      out.write("\t\t\t");

				}
			for (int i = startDate; i <= endDate; i++) {
			String bgcolor = (today.equals(year + ":" + (month + 1) + ":" + i)) ? "#CCCCCC" : "#FFFFFF";
			String color = (count % 7 == 0 || count % 7 == 6) ? "red" : "black";
			count++;
			
      out.write("\n");
      out.write("\t\t\t<td bgcolor=\"");
      out.print(bgcolor);
      out.write("\"><font size=\"2\" color=");
      out.print(color);
      out.write('>');
      out.print(i);
      out.write("</font></td>\n");
      out.write("\t\t\t");

				if (count % 7 == 0 && i < endDate) {
			
      out.write("\n");
      out.write("\t\t</tr>\n");
      out.write("\t\t<tr height=\"30\">\n");
      out.write("\t\t\t");

				}
			}
			while (count % 7 != 0) {
			
      out.write("\n");
      out.write("\t\t\t<td>&nbsp;</td>\n");
      out.write("\t\t\t");

				count++;
			}
			
      out.write("\n");
      out.write("\t\t</tr>\n");
      out.write("\t</table>\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fchoose_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    boolean _jspx_th_c_005fchoose_005f0_reused = false;
    try {
      _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f0.setParent(null);
      int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
      if (_jspx_eval_c_005fchoose_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("\t\t\t");
          if (_jspx_meth_c_005fwhen_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\n");
          out.write("\t\t\t");
          if (_jspx_meth_c_005fotherwise_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write('\n');
          out.write('	');
          out.write('	');
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
      _jspx_th_c_005fchoose_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fchoose_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f0_reused = false;
    try {
      _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      // /WEB-INF/views/mypage_exercise.jsp(348,3) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${empty list }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
      if (_jspx_eval_c_005fwhen_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("\t\t\t\t<tr>\n");
          out.write("\t\t\t\t\t<td colspan=\"3\" align=\"center\">---오늘의 코스를 등록해주세요---</td>\n");
          out.write("\t\t\t\t</tr>\n");
          out.write("\t\t\t");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
      _jspx_th_c_005fwhen_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f0 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    boolean _jspx_th_c_005fotherwise_005f0_reused = false;
    try {
      _jspx_th_c_005fotherwise_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fotherwise_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      int _jspx_eval_c_005fotherwise_005f0 = _jspx_th_c_005fotherwise_005f0.doStartTag();
      if (_jspx_eval_c_005fotherwise_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("\t\t\t\t");
          if (_jspx_meth_c_005fforEach_005f0(_jspx_th_c_005fotherwise_005f0, _jspx_page_context))
            return true;
          out.write("\n");
          out.write("\t\t\t");
          int evalDoAfterBody = _jspx_th_c_005fotherwise_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fotherwise_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f0);
      _jspx_th_c_005fotherwise_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fotherwise_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fotherwise_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fotherwise_005f0);
      // /WEB-INF/views/mypage_exercise.jsp(354,4) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/mypage_exercise.jsp(354,4) '${list }'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${list }",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/mypage_exercise.jsp(354,4) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("dto");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("\t\t\t\t\t<tr>\n");
            out.write("\t\t\t\t\t\t<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${dto.course_name }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("\t\t\t\t\t\t<td align=\"center\">");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${dto.distance }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("m</td>\n");
            out.write("\t\t\t\t\t\t<td align=\"center\">");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${dto.burn_kcal }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("kcal</td>\n");
            out.write("\t\t\t\t\t</tr>\n");
            out.write("\t\t\t\t");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f1 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    boolean _jspx_th_c_005fchoose_005f1_reused = false;
    try {
      _jspx_th_c_005fchoose_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f1.setParent(null);
      int _jspx_eval_c_005fchoose_005f1 = _jspx_th_c_005fchoose_005f1.doStartTag();
      if (_jspx_eval_c_005fchoose_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write('\n');
          out.write('	');
          out.write('	');
          if (_jspx_meth_c_005fwhen_005f1(_jspx_th_c_005fchoose_005f1, _jspx_page_context))
            return true;
          out.write('\n');
          out.write('	');
          out.write('	');
          if (_jspx_meth_c_005fotherwise_005f1(_jspx_th_c_005fchoose_005f1, _jspx_page_context))
            return true;
          out.write('\n');
          out.write('	');
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f1);
      _jspx_th_c_005fchoose_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fchoose_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f1 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f1_reused = false;
    try {
      _jspx_th_c_005fwhen_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f1);
      // /WEB-INF/views/mypage_exercise.jsp(366,2) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${empty total }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f1 = _jspx_th_c_005fwhen_005f1.doStartTag();
      if (_jspx_eval_c_005fwhen_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("\t\t\n");
          out.write("\t\t\t<p>총합 뛴 거리\t\t: 0</p>\n");
          out.write("\t\t\t<p>총합 소모 칼로리\t: 0</p>\n");
          out.write("\t\t");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f1);
      _jspx_th_c_005fwhen_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f1 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    boolean _jspx_th_c_005fotherwise_005f1_reused = false;
    try {
      _jspx_th_c_005fotherwise_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fotherwise_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f1);
      int _jspx_eval_c_005fotherwise_005f1 = _jspx_th_c_005fotherwise_005f1.doStartTag();
      if (_jspx_eval_c_005fotherwise_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("\t\t\t\t");
          if (_jspx_meth_c_005fforEach_005f1(_jspx_th_c_005fotherwise_005f1, _jspx_page_context))
            return true;
          out.write('\n');
          out.write('	');
          out.write('	');
          int evalDoAfterBody = _jspx_th_c_005fotherwise_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fotherwise_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f1);
      _jspx_th_c_005fotherwise_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fotherwise_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fotherwise_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f1_reused = false;
    try {
      _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fotherwise_005f1);
      // /WEB-INF/views/mypage_exercise.jsp(372,4) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/mypage_exercise.jsp(372,4) '${total }'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${total }",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/mypage_exercise.jsp(372,4) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setVar("dto");
      int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
        if (_jspx_eval_c_005fforEach_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("\t\t\t\t\t<p>총합 뛴 거리\t\t: ");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${dto.total_distance }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("m</p>\n");
            out.write("\t\t\t\t\t<p>총합 소모 칼로리\t: ");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${dto.total_burn_kcal }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("kcal</p>\n");
            out.write("\t\t\t\t");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
      _jspx_th_c_005fforEach_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f1_reused);
    }
    return false;
  }
}
