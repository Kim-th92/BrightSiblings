/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.39
 * Generated at: 2021-01-04 10:33:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class mypage_005fmain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("\tfunction selectCheck(form) {\n");
      out.write("\t\tform.submit();\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tfunction monthDown(form) {\n");
      out.write("\t\tif (form.month.value > 1) {\n");
      out.write("\t\t\tform.month.value--;\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tform.month.value = 12;\n");
      out.write("\t\t\tform.year.value--;\n");
      out.write("\t\t}\n");
      out.write("\t\tform.submit();\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tfunction monthUp(form) {\n");
      out.write("\t\tif (form.month.value < 12) {\n");
      out.write("\t\t\tform.month.value++;\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tform.month.value = 1;\n");
      out.write("\t\t\tform.year.value++;\n");
      out.write("\t\t}\n");
      out.write("\t\tform.submit();\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp", out, false);
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "mypage_middle.jsp", out, false);
      out.write('\n');
      out.write('\n');


	//현재 날짜 정보
	Calendar cal = Calendar.getInstance();

	int year = cal.get(Calendar.YEAR);
	int month = cal.get(Calendar.MONTH);
	int date = cal.get(Calendar.DATE);
	
	//오늘 날짜
	String today = year + "." + (month + 1) + "." + date;
	
	//선택한 연도, 월
	String input_year = request.getParameter("year");
	String input_month = request.getParameter("month");
	
	if (input_month != null) {
		month = Integer.parseInt(input_month) - 1;
	}
	
	if (input_year != null) {
		year = Integer.parseInt(input_year);
	}
	
	// 1일부터 시작하는 달력을 만들기 위해 오늘의 연도,월을 셋팅하고 일부분은 1을 셋팅한다.
	cal.set(year, month, 1);
	
	// 셋팅한 날짜로 부터 아래 내용을 구함
	// 해당 월의 첫날를 구함
	int startDate = cal.getMinimum(Calendar.DATE);
	
	// 해당 월의 마지막 날을 구함
	int endDate = cal.getActualMaximum(Calendar.DATE);
	
	// 1일의 요일을 구함
	int startDay = cal.get(Calendar.DAY_OF_WEEK);
	
	int count = 0;
	

      out.write("\n");
      out.write("\t<form method=\"post\" action=\"mypage_main.do\" name=\"change\">\n");
      out.write("\t\t<table width=\"400\" cellpadding=\"2\" cellspacing=\"0\" border=\"0\" align=\"center\">\n");
      out.write("\t\t\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t<td width=\"140\" align=\"right\"><input type=\"button\" value=\"◁\" onClick=\"monthDown(this.form)\"></td>\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t<td width=\"120\" align=\"center\">\n");
      out.write("\t\t\t<select name=\"year\" onchange=\"selectCheck(this.form)\">\n");
      out.write("\t\t\t\t");

					for (int i = year - 10; i < year + 10; i++) {
					String selected = (i == year) ? "selected" : "";
					String color = (i == year) ? "#CCCCCC" : "#FFFFFF";
					out.print("<option value=" + i + " " + selected + " style=background:" + color + ">" + i + "</option>");
				}
				
      out.write("\n");
      out.write("\t\t\t</select>\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t<select name=\"month\" onchange=\"selectCheck(this.form)\">\n");
      out.write("\t\t\t\t\t");

						for (int i = 1; i <= 12; i++) {
						String selected = (i == month + 1) ? "selected" : "";
						String color = (i == month + 1) ? "#CCCCCC" : "#FFFFFF";
						out.print("<option value=" + i + " " + selected + " style=background:" + color + ">" + i + "</option>");
					}
					
      out.write("\n");
      out.write("\t\t\t</select>\n");
      out.write("\t\t\t</td>\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t<td width=\"140\"><input type=\"button\" value=\"▷\" onClick=\"monthUp(this.form)\"></td>\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<td align=\"right\" colspan=\"3\">\n");
      out.write("\t\t\t\t\t<a href=\"mypage_main.do\"><font size=\"2\">오늘 : ");
      out.print(today);
      out.write("</font></a>\n");
      out.write("\t\t\t\t</td>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t\t\n");
      out.write("\t\t</table>\n");
      out.write("\t</form>\n");
      out.write("\t<table width=\"400\" cellpadding=\"2\" cellspacing=\"0\" border=\"1\"\n");
      out.write("\t\talign=\"center\">\n");
      out.write("\t\t<tr height=\"30\">\n");
      out.write("\t\t\t<td><font size=\"2\">일</font></td>\n");
      out.write("\t\t\t<td><font size=\"2\">월</font></td>\n");
      out.write("\t\t\t<td><font size=\"2\">화</font></td>\n");
      out.write("\t\t\t<td><font size=\"2\">수</font></td>\n");
      out.write("\t\t\t<td><font size=\"2\">목</font></td>\n");
      out.write("\t\t\t<td><font size=\"2\">금</font></td>\n");
      out.write("\t\t\t<td><font size=\"2\">토</font></td>\n");
      out.write("\t\t</tr>\n");
      out.write("\t\t<tr height=\"30\">\n");
      out.write("\t\t\t");

				for (int i = 1; i < startDay; i++) {
				count++;
			
      out.write("\n");
      out.write("\t\t\t<td>&nbsp;</td>\n");
      out.write("\t\t\t");

				}
			for (int i = startDate; i <= endDate; i++) {
			String bgcolor = (today.equals(year + ":" + (month + 1) + ":" + i)) ? "#CCCCCC" : "#FFFFFF";
			String color = (count % 7 == 0 || count % 7 == 6) ? "red" : "black";
			count++;
			
      out.write("\n");
      out.write("\t\t\t<td bgcolor=\"");
      out.print(bgcolor);
      out.write("\"><font size=\"2\" color=");
      out.print(color);
      out.write('>');
      out.print(i);
      out.write("</font></td>\n");
      out.write("\t\t\t");

				if (count % 7 == 0 && i < endDate) {
			
      out.write("\n");
      out.write("\t\t</tr>\n");
      out.write("\t\t<tr height=\"30\">\n");
      out.write("\t\t\t");

				}
			}
			while (count % 7 != 0) {
			
      out.write("\n");
      out.write("\t\t\t<td>&nbsp;</td>\n");
      out.write("\t\t\t");

				count++;
			}
			
      out.write("\n");
      out.write("\t\t</tr>\n");
      out.write("\t</table>\n");
      out.write("\n");
      out.write("\t<br />\n");
      out.write("\t<br />\n");
      out.write("\t<br />\n");
      out.write("\t<br />\n");
      out.write("\t<br />\n");
      out.write("\t<br />\n");
      out.write("\t<br />\n");
      out.write("\t<br />\n");
      out.write("\t<br />\n");
      out.write("\t<br />\n");
      out.write("\t<br />\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
